using UnityEngine;
using ThunderRoad;

namespace XenobladeRPG
{
    /// <summary>
    /// Adds stats to armor.
    /// </summary>
    public class XenobladeArmorModule : ItemModuleApparel
    {
        /// <summary>
        /// Physical Defense added while armor is equipped.
        /// </summary>
        public int physicalDefense = 0;
        /// <summary>
        /// Ether Defense added while armor is equipped.
        /// </summary>
        public int etherDefense = 0;
        /// <summary>
        /// Agility subtracted while armor is equipped.
        /// </summary>
        public int weight = 0;
        public override void OnEquip(Creature creature, ApparelModuleType equippedOn, ItemModuleWardrobe.CreatureWardrobe wardrobeData)
        {
            base.OnEquip(creature, equippedOn, wardrobeData);
            if (creature?.player != null)
            {
                XenobladeManager.SetPhysicalDefenseModifier(this, 1, physicalDefense);
                XenobladeManager.SetEtherDefenseModifier(this, 1, etherDefense);
                XenobladeManager.SetAgilityModifier(this, 1, weight);
            }
        }
        public override void OnUnequip(Creature creature, ApparelModuleType equippedOn, ItemModuleWardrobe.CreatureWardrobe wardrobeData)
        {
            base.OnUnequip(creature, equippedOn, wardrobeData);
            if (creature?.player != null)
            {
                XenobladeManager.RemovePhysicalDefenseModifier(this);
                XenobladeManager.RemoveEtherDefenseModifier(this);
            }
        }
    }
    /// <summary>
    /// Adds stats to weapons.
    /// </summary>
    public class XenobladeWeaponModule : ItemModule
    {
        /// <summary>
        /// Multiplies base attack damage by Player level.
        /// </summary>
        public bool isGrowthWeapon = false;
        /// <summary>
        /// Product of baseAttackDamage multiplied by Player level, if weapon is a growth weapon. Otherwise is directly taken from baseAttackDamage.
        /// </summary>
        public Vector2 attackDamageRange = new Vector2(0, 0);
        /// <summary>
        /// Base min/max damage, multiplied by Player level if weapon is a growth weapon.
        /// </summary>
        public Vector2 baseAttackDamage = new Vector2(0, 0);
        /// <summary>
        /// Physical Defense added while weapon is wielded.
        /// </summary>
        public int physicalDefense = 0;
        /// <summary>
        /// Ether Defense added while weapon is wielded.
        /// </summary>
        public int etherDefense = 0;
        /// <summary>
        /// Critical Rate added while weapon is wielded.
        /// </summary>
        public float criticalRate = 0;
        /// <summary>
        /// Block Rate added while weapon is wielded.
        /// </summary>
        public float blockRate = 0;
        /// <summary>
        /// If the module was automatically generated and added onto the weapon when the game starts.
        /// </summary>
        public bool isAutoGenerated = false;
        public override void OnItemLoaded(Item item)
        {
            base.OnItemLoaded(item);
            item.OnGrabEvent += Item_OnGrabEvent;
            item.OnUngrabEvent += Item_OnUngrabEvent;
            if (isAutoGenerated)
            {
                baseAttackDamage = new Vector2(Mathf.Clamp(8 * XenobladeManager.GetLevel(), 0, 999), Mathf.Clamp(11 * XenobladeManager.GetLevel(), 0, 999));
            }
            if (!isGrowthWeapon)
            {
                attackDamageRange.x = Mathf.Clamp(baseAttackDamage.x, 0, 999);
                attackDamageRange.y = Mathf.Clamp(baseAttackDamage.y, 0, 999);
            }
            else if (isGrowthWeapon)
            {
                attackDamageRange.x = Mathf.Clamp(baseAttackDamage.x * XenobladeManager.GetLevel(), 0, 999);
                attackDamageRange.y = Mathf.Clamp(baseAttackDamage.y * XenobladeManager.GetLevel(), 0, 999);
            }
        }
        public void RefreshLevel()
        {
            if (isGrowthWeapon)
            {
                attackDamageRange.x = Mathf.Clamp(baseAttackDamage.x * XenobladeManager.GetLevel(), 0, 999);
                attackDamageRange.y = Mathf.Clamp(baseAttackDamage.y * XenobladeManager.GetLevel(), 0, 999);
            }
        }

        private void Item_OnUngrabEvent(Handle handle, RagdollHand ragdollHand, bool throwing)
        {
            if (ragdollHand.creature.isPlayer && ragdollHand.otherHand.grabbedHandle?.item != item)
            {
                XenobladeManager.RemovePhysicalDefenseModifier(item);
                XenobladeManager.RemoveEtherDefenseModifier(item);
                XenobladeManager.RemoveCriticalRateModifier(item);
                XenobladeManager.RemoveBlockRateModifier(item);
            }
        }

        private void Item_OnGrabEvent(Handle handle, RagdollHand ragdollHand)
        {
            if (ragdollHand.creature.isPlayer && ragdollHand.otherHand.grabbedHandle?.item != item)
            {
                XenobladeManager.SetPhysicalDefenseModifier(item, 1, physicalDefense);
                XenobladeManager.SetEtherDefenseModifier(item, 1, etherDefense);
                XenobladeManager.SetCriticalRateModifier(item, criticalRate);
                XenobladeManager.SetBlockRateModifier(item, blockRate);
            }
        }
    }
}
